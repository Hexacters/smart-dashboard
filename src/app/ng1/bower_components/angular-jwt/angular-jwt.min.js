(function(){angular.module("angular-jwt",["angular-jwt.interceptor","angular-jwt.jwt"]);angular.module("angular-jwt.interceptor",[]).provider("jwtInterceptor",function(){this.authHeader="Authorization";this.authPrefix="Bearer ";this.tokenGetter=function(){return null};var a=this;this.$get=["$q","$injector","$rootScope",function(c,d,b){return{request:function(e){if(e.skipAuthorization){return e}e.headers=e.headers||{};if(e.headers[a.authHeader]){return e}var f=c.when(d.invoke(a.tokenGetter,this,{config:e}));return f.then(function(g){if(g){e.headers[a.authHeader]=a.authPrefix+g}return e})},responseError:function(e){if(e.status===401){b.$broadcast("unauthenticated",e)}return c.reject(e)}}}]});angular.module("angular-jwt.jwt",[]).service("jwtHelper",function(){this.urlBase64Decode=function(b){var a=b.replace("-","+").replace("_","/");switch(a.length%4){case 0:break;case 2:a+="==";break;case 3:a+="=";break;default:throw"Illegal base64url string!"}return window.atob(a)};this.decodeToken=function(b){var c=b.split(".");if(c.length!==3){throw new Error("JWT must have 3 parts")}var a=this.urlBase64Decode(c[1]);if(!a){throw new Error("Cannot decode the token")}return JSON.parse(a)};this.decodeFirstToken=function(b){var c=b.split(".");if(c.length!==3){throw new Error("JWT must have 3 parts")}var a=this.urlBase64Decode(c[0]);if(!a){throw new Error("Cannot decode the token")}return a};this.getTokenExpirationDate=function(b){var a;a=this.decodeToken(b);if(!a.exp){return null}var c=new Date(0);c.setUTCSeconds(a.exp);return c};this.getTokenIssuedDate=function(b){var a;a=this.decodeToken(b);if(!a.exp){return null}var c=new Date(0);c.setUTCSeconds(a.iat);return c};this.isTokenExpired=function(a){var b=this.getTokenExpirationDate(a);if(!b){return false}return !(b.valueOf()>new Date().valueOf())};this.getExpirationInterval=function(c){var b=this.getTokenExpirationDate(c);b=b.toGMTString();b=new Date(b);var a=new Date();a=a.toGMTString();a=new Date(a);if(!b){return false}return(b.valueOf()-a.valueOf())};this.getExpiresIn=function(a){decoded=this.decodeToken(a);if(!decoded){return}return(decoded.expires_in*1000)}})}());